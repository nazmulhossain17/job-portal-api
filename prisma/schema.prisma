// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName           String
  lastName            String
  email               String    @unique
  password            String
  gender              String
  role                Role
  status              CandidateStatus?  @default(PENDING)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  appliedJobs         Job[]   @relation("AppliedJobs")
  failedLoginAttempts Int      @default(0)
  isLocked            Boolean  @default(false)
  lockUntil           DateTime?
  resetPasswordOTP    String?
  resetPasswordExpires DateTime?
  @@map("candidate")
}


model Admin {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String   @unique
  password            String
  failedLoginAttempts Int      @default(0)
  isLocked            Boolean  @default(false)
  lockUntil           DateTime?
  resetPasswordOTP    String?
  resetPasswordExpires DateTime?
}


model Job {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  location    String
  salary      String
  companyName String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  recruiter   Recruiter @relation("RecruiterJobs", fields: [recruiterId], references: [id])
  recruiterId String    @db.ObjectId
  appliedBy   Candidate? @relation("AppliedJobs", fields: [appliedById], references: [id])
  appliedById String?   @db.ObjectId
}

model Recruiter {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  firstName           String
  lastName            String
  email               String      @unique
  password            String
  gender              String
  role                Role        // No @default directive needed here
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  jobs                Job[]       @relation("RecruiterJobs")
  failedLoginAttempts Int         @default(0)
  isLocked            Boolean     @default(false)
  lockUntil           DateTime?
  resetPasswordOTP    String?    
  resetPasswordExpires DateTime?   
  @@map("recruiters")
}


model IpBlock {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  ipAddress  String    @unique
  attempts   Int
  lockUntil  DateTime?
}


enum CandidateStatus {
  SHORTLISTED
  REJECTED
  SELECTED
  PENDING
}

enum Role {
  RECRUITER
  CANDIDATE
}